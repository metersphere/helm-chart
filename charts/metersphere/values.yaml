ingress:
  enabled: true
  host: ms-dev.apps.metersphere.com
  annotations: {}
    ## example for ingress annotions.
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"      
  https:
    enabled: false
    secretName: ""

common:
  imagePrefix: "registry.cn-qingdao.aliyuncs.com/metersphere/"
  imagePullSecrets: nil
  storageClass: default
  imageTag: v2.0.1
  imagePullPolicy: Always
  mysql: 
    host: metersphere-mysql
    port: 3306
    username: root
    password: Password123@mysql
  redis:
    host: metersphere-redis
    port: 6379
    password: Password123@redis
    database: 1
  kafka:
    host: metersphere-kafka 
    port: 9092
    metricTopic: JMETER_METRICS
    logTopic: JMETER_LOGS
    testTopic: LOAD_TESTS
    reportTopic: JMETER_REPORTS

server:
  enabled: true
  image: metersphere
  replicas: 1
  properties: |-
    ## DATABASE
    spring.datasource.url=jdbc:mysql://{{.Values.common.mysql.host}}:{{.Values.common.mysql.port}}/metersphere?autoReconnect=false&useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
    spring.datasource.username={{.Values.common.mysql.username}}
    spring.datasource.password={{.Values.common.mysql.password}}
    
    ## redis
    spring.session.store-type=redis
    spring.redis.host={{.Values.common.redis.host}}
    spring.redis.port={{.Values.common.redis.port}}
    spring.redis.database={{.Values.common.redis.database}}
    spring.redis.password={{.Values.common.redis.password}}

    ## KAFKA
    kafka.partitions=1
    kafka.replicas=1
    kafka.topic={{.Values.common.kafka.metricTopic}}
    kafka.bootstrap-servers={{.Values.common.kafka.host}}.{{.Release.Namespace}}:{{.Values.common.kafka.port}}
    kafka.log.topic={{.Values.common.kafka.logTopic}}
    kafka.test.topic={{.Values.common.kafka.testTopic}}
    kafka.report.topic={{.Values.common.kafka.reportTopic}}
    tcp.mock.port=10000

    ## JMETER
    jmeter.image={{ .Values.common.imagePrefix }}{{.Values.jmeter.image}}:{{.Values.jmeter.imageTag}}
    jmeter.pod.threads.limit=500

    ## K8S
    k8s.node-controller-image={{ .Values.common.imagePrefix }}{{.Values.nodeController.image}}:{{.Values.common.imageTag}}

    logger.sql.level=info
    
dataStreaming:
  enabled: true
  image: ms-data-streaming
  replicas: 1
  properties: |-
    ## DATABASE
    spring.datasource.url=jdbc:mysql://{{.Values.common.mysql.host}}:{{.Values.common.mysql.port}}/metersphere?autoReconnect=false&useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
    spring.datasource.username={{.Values.common.mysql.username}}
    spring.datasource.password={{.Values.common.mysql.password}}

    ## KAFKA
    kafka.partitions=1
    kafka.replicas=1
    kafka.topic={{.Values.common.kafka.metricTopic}}
    kafka.bootstrap-servers={{.Values.common.kafka.host}}:{{.Values.common.kafka.port}}
    kafka.log.topic={{.Values.common.kafka.logTopic}}
    kafka.test.topic={{.Values.common.kafka.testTopic}}
    kafka.report.topic={{.Values.common.kafka.reportTopic}}
    jmeter.report.granularity=5000

nodeController:
  enabled: true
  image: ms-node-controller
  replicas: 1
  properties: |-
    ## TBD

jmeter:
  image: jmeter-master
  imageTag: 5.4.3-ms5-jdk11

logPersistence:
  enabled: false
  accessModes: ReadWriteOnce
  size: 10Gi

dataPersistence:
  enabled: true
  accessModes: ReadWriteOnce
  size: 10Gi

mysql:
  enabled: true
  image: mysql
  imageTag: "8.0.28"
  password: Password123@mysql
  persistence:
    enabled: true
    accessModes: ReadWriteOnce
    size: 20Gi
redis:
  enabled: true
  image: redis
  imageTag: "6.2.6"
  password: Password123@redis
  persistence:
    enabled: true
    accessModes: ReadWriteOnce
    size: 10Gi
kafka:
  enabled: true
  fullnameOverride: metersphere-kafka
  persistence:
    enabled: false
  logPersistence:
    enabled: false
  logFlushIntervalMessages: _10000
  logFlushIntervalMs: 1000
  logRetentionBytes: _1073741824
  logRetentionCheckIntervalMs: 300000
  logRetentionHours: 168
  logSegmentBytes: _1073741824
  maxMessageBytes: _1000012
  livenessProbe:
    initialDelaySeconds: 20
    periodSeconds: 15
    timeoutSeconds: 15
  readinessProbe:
    initialDelaySeconds: 20
    periodSeconds: 15
    timeoutSeconds: 15
  externalAccess:
    enabled: true
    service:
      type: NodePort
      useHostIPs: true
    autoDiscovery:
      enabled: true
  serviceAccount:
    create: true
  rbac:
    create: true
  zookeeper:
    enabled: true
    logLevel: ERROR
    persistence:
      enabled: false
    fullnameOverride: metersphere-zookeeper
  extraEnvVars:
    - name: FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS
      value: "true"
zookeeper:
  enabled: true
