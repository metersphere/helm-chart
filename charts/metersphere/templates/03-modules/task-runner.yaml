{{if .Values.taskRunner.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-runner
spec:
  replicas: {{.Values.taskRunner.replicas | default 1}}
  selector:
    matchLabels:
      app: task-runner
  template:
    metadata:
      labels:
        app: task-runner
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - task-runner
              topologyKey: kubernetes.io/hostname
      initContainers:
        - name: wait-kafka
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: metersphere-config
                  key: kafka.bootstrap-servers
          command:
            - sh
            - -c
            - |
              set -ex
              for i in ${KAFKA_BOOTSTRAP_SERVERS//,/ };do
                until nc -zv ${i%:*} ${i#*:};do sleep 5;done
                echo "Kafka bootstrap $i is OK now."
                sleep 5
              done
      containers:
        - name: task-runner
          image: {{.Values.common.imagePrefix}}{{.Values.common.image}}:{{.Values.common.imageTag}}
          imagePullPolicy: {{.Values.common.imagePullPolicy}}
          resources:
            limits:
              memory: 800Mi
            requests:
              memory: 300Mi
              cpu: 0.1
          ports:
            - name: http
              containerPort: 8000
          env:
            - name: FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS
              value: "true"
          command:
            - sh
            - -c
            - |
              sh /shells/task-runner.sh
          volumeMounts:
            - mountPath: /opt/metersphere/logs
              name: metersphere-logs
            - mountPath: /opt/metersphere/data
              name: task-runner-data
      {{if ne (.Values.common.imagePullSecrets | default "nil") "nil"}}
      imagePullSecrets:
        - name: {{.Values.common.imagePullSecrets}}
      {{ end }}
      volumes:
        - name: metersphere-logs
          {{if .Values.logPersistence.enabled}}
          persistentVolumeClaim:
            claimName: metersphere-logs-pvc
          {{ else }}
          emptyDir: {}
          {{ end }}
        - name: task-runner-data
          {{if .Values.dataPersistence.enabled}}
          persistentVolumeClaim:
            claimName: task-runner-data-pvc
          {{ else }}
          emptyDir: {}
          {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: task-runner
  labels:
    app: task-runner
spec:
  sessionAffinity: ClientIP
  selector:
    app: task-runner
  ports:
    - name: http
      port: 8000
      protocol: TCP
{{end}}
