{{if .Values.nodeController.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metersphere-node-controller
spec:
  replicas: {{.Values.nodeController.replicas | default 1}}
  selector:
    matchLabels:
      app: metersphere-node-controller
  template:
    metadata:
      labels:
        app: metersphere-node-controller
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - metersphere-node-controller
              topologyKey: kubernetes.io/hostname
      initContainers:
        - name: wait-kafka
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -ex
              until nc -zv {{ .Values.kafka.host }} {{ .Values.kafka.port }}; do sleep 5; done
              sleep 10
      containers:
        - name: metersphere-node-controller
          image: {{.Values.common.imagePrefix}}{{.Values.nodeController.image}}:{{.Values.common.imageTag}}
          imagePullPolicy: {{.Values.common.imagePullPolicy}}
          resources:
            limits:
              memory: 800Mi
            requests:
              memory: 300Mi
              cpu: 0.1
          ports:
            - name: http
              containerPort: 8082
          env: 
            - name: FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS
              value: "true"
          volumeMounts:
            - mountPath: /opt/metersphere/conf
              name: opt-metersphere-config
            - mountPath: /opt/metersphere/logs
              name: metersphere-logs
            - mountPath: /opt/metersphere/data
              name: node-controller-data              
            - mountPath: /var/run 
              name: docker-sock 
      {{if ne (.Values.common.imagePullSecrets | default "nil") "nil"}}
      imagePullSecrets:
        - name: {{.Values.common.imagePullSecrets}}
      {{ end }}
      volumes:
        - configMap:
            defaultMode: 420
            name: metersphere-config
            items:
            - key: node-controller.properties
              path: metersphere.properties
          name: opt-metersphere-config
        - name: metersphere-logs
          {{if .Values.logPersistence.enabled}}
          persistentVolumeClaim:
            claimName: metersphere-logs-pvc
          {{ else }}
          emptyDir: {}
          {{ end }}
        - name: node-controller-data
          {{if .Values.dataPersistence.enabled}}
          persistentVolumeClaim:
            claimName: node-controller-data-pvc
          {{ else }}
          emptyDir: {}
          {{ end }}          
        - name: docker-sock 
          hostPath: 
            path: /var/run 
---
apiVersion: v1
kind: Service
metadata:
  name: ms-node-controller
  labels:
    app: metersphere-node-controller
spec:
  sessionAffinity: ClientIP
  selector:
    app: metersphere-node-controller
  ports:
    - name: http
      port: 8082
      protocol: TCP
{{end}}
