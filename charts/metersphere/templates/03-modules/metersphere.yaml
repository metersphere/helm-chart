{{if .Values.metersphere.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: metersphere
spec:
  replicas: {{.Values.metersphere.replicas | default 1}}
  selector:
    matchLabels:
      app: metersphere
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: metersphere
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - metersphere
              topologyKey: kubernetes.io/hostname
      initContainers:
        - name: wait-mysql
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              set -ex
              until nc -zv {{ .Values.mysql.host }} {{ .Values.mysql.port }}; do sleep 5; done
              sleep 10
        {{if and .Values.kafka.enabled .Values.kafka.externalAccess.enabled }}
        - name: get-kafka-external
          image: docker.io/bitnami/kubectl:1.28.2-debian-11-r16
          command:
            - /scripts/get-kafka-external.sh
          volumeMounts:
            - name: scripts
              mountPath: /scripts/get-kafka-external.sh
              subPath: get-kafka-external.sh
        - name: wait-kafka
          image: busybox:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: KAFKA_BOOTSTRAP_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: metersphere-config
                  key: kafka.bootstrap-servers
          command:
            - sh
            - -c
            - |
              set -ex
              for i in ${KAFKA_BOOTSTRAP_SERVERS//,/ };do
                until nc -zv ${i%:*} ${i#*:};do sleep 5;done
                echo "Kafka bootstrap $i is OK now."
                sleep 5
              done
      serviceAccountName: metersphere
        {{ end }}
      containers:
        - name: metersphere
          image: {{.Values.common.imagePrefix}}{{.Values.common.image}}:{{.Values.common.imageTag}}
          imagePullPolicy: {{.Values.common.imagePullPolicy}}
          resources:
            limits:
              memory: 800Mi
            requests:
              memory: 300Mi
              cpu: 0.1
          ports:
            - name: http
              containerPort: 8081
          env:
            - name: FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS
              value: "true"
            {{if and .Values.kafka.enabled .Values.kafka.externalAccess.enabled }}
            - name: KAFKA_BOOTSTRAP-SERVERS
              valueFrom:
                configMapKeyRef:
                  name: metersphere-config
                  key: kafka.bootstrap-servers
            {{ end }}
          command:
            - sh
            - -c
            - |
              sh /shells/metersphere.sh
          volumeMounts:
            - mountPath: /opt/metersphere/conf
              name: opt-metersphere-config
            - mountPath: /opt/metersphere/logs
              name: metersphere-logs
            - mountPath: /opt/metersphere/data
              name: metersphere-data
      {{if ne (.Values.common.imagePullSecrets | default "nil") "nil"}}
      imagePullSecrets:
        - name: {{.Values.common.imagePullSecrets}}
      {{ end }}
      volumes:
        - configMap:
            defaultMode: 420
            name: metersphere-config
            items:
            - key: metersphere.properties
              path: metersphere.properties
            - key: redisson.yml
              path: redisson.yml
          name: opt-metersphere-config
        - name: metersphere-logs
          {{if .Values.logPersistence.enabled}}
          persistentVolumeClaim:
            claimName: metersphere-logs-pvc
          {{ else }}
          emptyDir: {}
          {{ end }}
        - name: metersphere-data
          {{if .Values.dataPersistence.enabled}}
          persistentVolumeClaim:
            claimName: metersphere-data-pvc
          {{ else }}
          emptyDir: {}
          {{ end }}
        - name: scripts
          configMap:
            name: metersphere-scripts
            defaultMode: 0755
---
apiVersion: v1
kind: Service
metadata:
  name: metersphere
  labels:
    app: metersphere
spec:
  sessionAffinity: ClientIP
  selector:
    app: metersphere
  ports:
    - name: http
      port: 8081
      protocol: TCP
{{end}}
